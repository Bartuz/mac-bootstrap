#!/usr/bin/env bash

################################################################################
# bootstrap
#
# This script is intended to set up a new Mac computer with my dotfiles and
# other development preferences.
################################################################################


# Thank you, thoughtbot!
fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

set -e # Terminate script if anything exits with a non-zero value
set -u # Prevent unset variables


################################################################################
# Variable declarations
################################################################################

osname=$(uname)
divider="====> "
COMMANDLINE_TOOLS="/Library/Developer/CommandLineTools"
OLD_DOTFILES_BACKUP=$HOME/old_dotfiles_backup
DICTIONARY_DIR=$HOME/Library/Spelling

DOTFILES_REPO_URL="https://github.com/joshukraine/dotfiles.git"
DOTFILES_BRANCH="master"
DOTFILES_DIR=$HOME/dotfiles

BOOTSTRAP_REPO_URL="https://github.com/joshukraine/mac-bootstrap.git"
BOOTSTRAP_BRANCH="master"
BOOTSTRAP_DIR=$HOME/mac-bootstrap


################################################################################
# Make sure we're on a Mac before continuing
################################################################################

if [ "$osname" == 'Linux' ]; then
  fancy_echo "Oops, looks like you're on a Linux machine. Please have a look at
  my Linux Bootstrap script: https://github.com/joshukraine/linux-bootstrap"
  exit 1
elif [ "$osname" != 'Darwin' ]; then
  fancy_echo "Oops, it looks like you're using a non-UNIX system. This script
only supports Mac. Exiting..."
  exit 1
fi


################################################################################
# Check for presence of command line tools if macOS
################################################################################

if [ ! -d "$COMMANDLINE_TOOLS" ]; then
  fancy_echo "Apple's command line developer tools must be installed before
running this script. To install them, just run 'xcode-select --install' from
the terminal and then follow the prompts. Once the command line tools have been
installed, you can try running this script again."
  exit 1
fi


################################################################################
# 1. Provision with my fork of Laptop
# * Also clone mac-bootstrap repo
################################################################################

fancy_echo "$divider Step 1: Invoking my fork of thoughtbot's Laptop script..."

curl --remote-name https://raw.githubusercontent.com/joshukraine/laptop/master/mac
sh mac 2>&1 | tee ~/laptop.log

fancy_echo "Laptop installation complete!"
fancy_echo "Cloning mac-bootstrap repo..."

git clone $BOOTSTRAP_REPO_URL -b $BOOTSTRAP_BRANCH $BOOTSTRAP_DIR

fancy_echo "Done!"


################################################################################
# 2. Install oh-my-zsh
################################################################################

fancy_echo "$divider Step 2: Installing oh-my-zsh..."

if [ -d "$HOME/.oh-my-zsh" ]; then
  rm -rf $HOME/.oh-my-zsh
fi

git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh

fancy_echo "Done!"


################################################################################
# 3. Install NVM
################################################################################

fancy_echo "$divider Step 3: Installing NVM..."

source "$BOOTSTRAP_DIR/install/nvm"


################################################################################
# 4. Setup dotfiles
################################################################################

fancy_echo "$divider Step 4: Installing dotfiles..."
if [[ -d $DOTFILES_DIR ]]; then
  fancy_echo "Backing up old dotfiles to $HOME/old_dotfiles_backup..."
  rm -rf $OLD_DOTFILES_BACKUP
  cp -R $DOTFILES_DIR $OLD_DOTFILES_BACKUP
  rm -rf $DOTFILES_DIR
fi

fancy_echo "Cloning your dotfiles repo to ${DOTFILES_DIR} ..."

git clone $DOTFILES_REPO_URL -b $DOTFILES_BRANCH $DOTFILES_DIR
source $DOTFILES_DIR/install.sh

# Setup TPM for tmux plugins.
# https://github.com/tmux-plugins/tpm#installation
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

fancy_echo "Done!"


################################################################################
# 5. Install ~/bin utilities
################################################################################

fancy_echo "$divider Step 5: Installing ~/bin utilities..."

cp -R $BOOTSTRAP_DIR/bin/* $HOME/bin/

fancy_echo "Done!"


################################################################################
# 6. Install Ukrainian language utilities
#
# Reference:
# * http://apple.stackexchange.com/a/11842/75491
# * http://extensions.services.openoffice.org/en/project/ukrainian-dictionary
################################################################################

fancy_echo "$divider Step 6: Installing Ukrainian language utilities..."

cp $BOOTSTRAP_DIR/lib/{hyph_uk_UA.dic,uk_UA.aff,uk_UA.dic} $DICTIONARY_DIR

git clone https://github.com/joshukraine/xkbswitch-macosx
cp xkbswitch-macosx/bin/xkbswitch /usr/local/bin
rm -rf xkbswitch-macosx

fancy_echo "Done!"


################################################################################
# 7. Install Powerline-patched fonts
################################################################################

fancy_echo "$divider Step 7: Installing fixed-width fonts patched for use with Powerline symbols..."
if [ -d "$HOME/src/fonts" ]; then
  rm -rf $HOME/src/fonts
fi
git clone https://github.com/powerline/fonts.git $HOME/src/fonts
cd $HOME/src/fonts
./install.sh
cd $HOME
rm -rf $HOME/src/fonts

fancy_echo "Done!"


################################################################################
# 8. Install Vundle and vim plugins
################################################################################

fancy_echo "$divider Step 8: Installing Vundle and vim plugins..."
if [ -d $HOME/.vim/bundle ]; then
  rm -rf $HOME/.vim/bundle
fi
git clone https://github.com/gmarik/Vundle.vim.git $HOME/.vim/bundle/Vundle.vim
cp -R $DOTFILES_DIR/vim/colors $HOME/.vim # So vim won't complain about solarized not being found.
vim +PluginInstall +qall
rm -rf $HOME/.vim/colors

fancy_echo "Done!"


################################################################################
# 9. Install extra Homebrew packages
################################################################################

fancy_echo "$divider Step 9: Installing extra Homebrew formulae..."

source "$BOOTSTRAP_DIR/install/brew"

fancy_echo "Done!"


################################################################################
# 10. Install Cask and related software
################################################################################

fancy_echo "$divider Step 10: Installing Cask and related software..."

brew tap caskroom/cask
source "$BOOTSTRAP_DIR/install/brew-cask"

fancy_echo "Done!"


################################################################################
# 11. Set macOS preferences
################################################################################

fancy_echo "$divider Step 11: Setting macOS preferences..."

source "$BOOTSTRAP_DIR/install/macos-defaults"
source "$BOOTSTRAP_DIR/install/macos-dock"
rm -rf $BOOTSTRAP_DIR

fancy_echo "Done!"


echo
echo "**********************************************************************"
echo "**** Mac Bootstrap script complete! Please restart your computer. ****"
echo "**********************************************************************"
echo
